#!/usr/bin/env python

import re, sys
from StringIO import StringIO
from testify import *

class Sample:
  def __init__(self, *args, **kwds):
    self.args = args
    self.kwds = kwds

traceback = '''(?:  File ".+", line \d+, in .+
    .+
)+'''

stdout = sys.stdout
sys.stdout = StringIO()

try:
  test(lambda: equiv('Equiv', 'Equiv'))

finally:
  stdout, sys.stdout = sys.stdout, stdout

equal('''# <lambda>
ok 1
''', stdout.getvalue())

stdout = sys.stdout
sys.stdout = StringIO()

try:
  test(lambda: equiv(('Equiv', 'Viuqe'), ('Equiv', 'Viuqe')))

finally:
  stdout, sys.stdout = sys.stdout, stdout

equal('''# <lambda>
ok 1
''', stdout.getvalue())

stdout = sys.stdout
sys.stdout = StringIO()

try:
  test(lambda: equiv({ 'Equiv': 'Viuqe', 'Viuqe': 'Equiv' }, { 'Equiv': 'Viuqe', 'Viuqe': 'Equiv' }))

finally:
  stdout, sys.stdout = sys.stdout, stdout

equal('''# <lambda>
ok 1
''', stdout.getvalue())

stdout = sys.stdout
sys.stdout = StringIO()

try:
  test(lambda: equiv(Sample('Equiv'), Sample('Equiv')))

finally:
  stdout, sys.stdout = sys.stdout, stdout

equal('''# <lambda>
ok 1
''', stdout.getvalue())

stdout = sys.stdout
sys.stdout = StringIO()

try:
  test(lambda: equiv('Expect', 'Actual'))

finally:
  stdout, sys.stdout = sys.stdout, stdout

ok(re.match('''# <lambda>
not ok 1
# 'Actual'
# 'Expect'
''' + traceback, stdout.getvalue()), stdout.getvalue())

stdout = sys.stdout
sys.stdout = StringIO()

try:
  test(lambda: equiv(('Equiv', 'Expect'), ('Equiv', 'Actual')))

finally:
  stdout, sys.stdout = sys.stdout, stdout

ok(re.match('''# <lambda>
not ok 1
# 'Actual'
# 'Expect'
''' + traceback, stdout.getvalue()), stdout.getvalue())

stdout = sys.stdout
sys.stdout = StringIO()

try:
  test(lambda: equiv(('Equiv', 'Viuqe'), ()))

finally:
  stdout, sys.stdout = sys.stdout, stdout

ok(re.match('''# <lambda>
not ok 1
# 'Equiv'
# 'Viuqe'
''' + traceback, stdout.getvalue()), stdout.getvalue())

stdout = sys.stdout
sys.stdout = StringIO()

try:
  test(lambda: equiv({ 'Equiv': 'Viuqe', 'Viuqe': 'Expect', 'Expect': 'Equiv' }, { 'Equiv': 'Viuqe', 'Viuqe': 'Actual', 'Actual': 'Equiv' }))

finally:
  stdout, sys.stdout = sys.stdout, stdout

ok(re.match('''# <lambda>
not ok 1
# 'Actual'
# 'Expect'
# 'Equiv'
# 'Equiv'
''' + traceback, stdout.getvalue()), stdout.getvalue())

stdout = sys.stdout
sys.stdout = StringIO()

try:
  test(lambda: equiv(Sample('Expect'), Sample('Actual')))

finally:
  stdout, sys.stdout = sys.stdout, stdout

ok(re.match('''# <lambda>
not ok 1
# 'Actual'
# 'Expect'
''' + traceback, stdout.getvalue()), stdout.getvalue())

stdout = sys.stdout
sys.stdout = StringIO()

try:
  test(lambda: equiv(('Equiv',), None))

finally:
  stdout, sys.stdout = sys.stdout, stdout

ok(re.match('''# <lambda>
not ok 1
# None
# \('Equiv',\)
''' + traceback, stdout.getvalue()), stdout.getvalue())
